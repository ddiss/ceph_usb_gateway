# helper functions for rbd-usb.sh

# import user configuration
# XXX WARNING: rbd-usb.conf is accepted via conf FS, so yes, this *will* execute
#              any (potentially malicious) commands that the user may have put
#              in there!
. /etc/rbd-usb.conf

function _led_set_off() {
	if [ -f /sys/class/leds/cubietruck:blue:usr/trigger ]; then
		echo none > /sys/class/leds/cubietruck:green:usr/trigger
		echo none > /sys/class/leds/cubietruck:white:usr/trigger
		echo none > /sys/class/leds/cubietruck:orange:usr/trigger
		echo none > /sys/class/leds/cubietruck:blue:usr/trigger
	fi
}

function _led_set_blue_only() {
	action="${1-default-on}"

	# turn off all LEDs except for blue
	if [ -f /sys/class/leds/cubietruck:blue:usr/trigger ]; then
		echo none > /sys/class/leds/cubietruck:green:usr/trigger
		echo none > /sys/class/leds/cubietruck:white:usr/trigger
		echo none > /sys/class/leds/cubietruck:orange:usr/trigger
		echo "$action" > /sys/class/leds/cubietruck:blue:usr/trigger
	fi
}

function _led_set_white_only() {
	action="${1-default-on}"

	if [ -f /sys/class/leds/cubietruck:white:usr/trigger ]; then
		echo none > /sys/class/leds/cubietruck:green:usr/trigger
		echo "$action" > /sys/class/leds/cubietruck:white:usr/trigger
		echo none > /sys/class/leds/cubietruck:orange:usr/trigger
		echo none > /sys/class/leds/cubietruck:blue:usr/trigger
	fi
}

function _led_set_orange_only() {
	action="${1-default-on}"

	if [ -f /sys/class/leds/cubietruck:orange:usr/trigger ]; then
		echo none > /sys/class/leds/cubietruck:green:usr/trigger
		echo none > /sys/class/leds/cubietruck:white:usr/trigger
		echo "$action" > /sys/class/leds/cubietruck:orange:usr/trigger
		echo none > /sys/class/leds/cubietruck:blue:usr/trigger
	fi
}

function _stash_log() {
	local systemd_unit=$1

	which journalctl &> /dev/null
	if [ $? -ne 0 ]; then
		echo "skipping log stash - no journalctl"
		return
	fi

	journalctl --unit "$systemd_unit" > /var/log/${systemd_unit}.log \
		|| echo "failed to stash log"
}

_fatal() {
	_led_set_orange_only
	touch /usr/lib/rbd-usb-run-conf.flag
	_stash_log rbd-usb.service
	echo "FATAL: $*"
	exit 1
}

_reboot() {
	_led_set_orange_only "heartbeat"
	touch /usr/lib/rbd-usb-run-conf.flag
	_stash_log rbd-usb.service
	echo "REBOOTING: $*"
	if [ -f /proc/sys/kernel/sysrq ]; then
		echo 1 > /proc/sys/kernel/sysrq
		echo b > /proc/sysrq-trigger
	else
		reboot
	fi
}

# XXX WARNING: ini files are accepted via conf FS, so yes, this *will* execute
#              any (potentially malicious) commands that the user may have put
#              in there!
function _ini_parse() {
	local ini_file=$1
	local ini_section=$2
	# TODO accept variable argument

	eval `sed -e 's/[[:space:]]*\=[[:space:]]*/=/' \
		  -e 's/;.*$//' \
		  -e 's/[[:space:]]*$//' \
		  -e 's/^[[:space:]]*//' \
		  -e "s/^\(.*\)=\([^\"']*\)$/\1=\2/" \
		  -e ':b; s/^\([^=]*\)* /\1_/; tb;' \
			< $ini_file \
		| sed -n -e "/^\[$ini_section\]/,/^\s*\[/{/^[^;].*\=.*/p;}"`
}

function _keyring_parse() {
	local key_user=$1
	local key_path="/etc/ceph/ceph.client.${key_user}.keyring"

	if [ ! -f "$key_path" ]; then
		# fallback to vstart keyring, if present
		key_path="/etc/ceph/keyring"
		[ -f "$key_path" ] || _fatal "could not locate keyring"
	fi

	_ini_parse "$key_path" "client.${key_user}"
}

function _usb_expose() {
	local usb_dev=$1
	local vendor_id=$2
	local product_id=$3
	local serial=$4
	local removable=$5

	modprobe usb_f_mass_storage
	modprobe usb_gadget

	cd /sys/kernel/config/usb_gadget/ || _fatal "usb_gadget not present"

	mkdir -p ceph || _fatal "failed to create gadget configfs node"
	cd ceph || _fatal "failed to enter gadget configfs node"

	echo 0x1d6b > idVendor # Linux Foundation
	echo 0x0104 > idProduct # Multifunction Composite Gadget
	echo 0x0090 > bcdDevice # v0.9.0

	mkdir -p strings/0x409 || _fatal "failed to create 0x409 descriptors"
	# FIXME should derive serialnumber from board uuid?
	echo "$vendor_id" > strings/0x409/manufacturer
	echo "$product_id" > strings/0x409/product
	echo "$serial" > strings/0x409/serialnumber

	mkdir -p functions/mass_storage.usb0 \
		|| _fatal "failed to init mass storage gadget"
	echo 1 > functions/mass_storage.usb0/stall
	echo 0 > functions/mass_storage.usb0/lun.0/cdrom
	echo 0 > functions/mass_storage.usb0/lun.0/ro
	echo 0 > functions/mass_storage.usb0/lun.0/nofua
	echo "$removable" > functions/mass_storage.usb0/lun.0/removable

	echo "$usb_dev" > functions/mass_storage.usb0/lun.0/file \
		|| _fatal "failed to use $usb_dev as LUN backing device"

	mkdir -p configs/c.1/strings/0x409 \
		|| _fatal "failed to create 0x409 configuration"
	echo "Config 1: mass-storage" > configs/c.1/strings/0x409/configuration
	echo 250 > configs/c.1/MaxPower
	ln -s functions/mass_storage.usb0 configs/c.1/ \
		|| _fatal "failed to create mass_storage configfs link"

	# FIXME: check for /sys/class/udc entry
	ls /sys/class/udc > UDC
}

function _usb_unexpose() {
	cd /sys/kernel/config/usb_gadget/ || _fatal "usb_gadget not present"

	echo "" > ceph/functions/mass_storage.usb0/lun.0/file

	rm ceph/configs/c.1/mass_storage.usb0 \
		|| _fatal "failed to delete mass_storage configfs link"

	rmdir ceph/configs/c.1/strings/0x409 \
		|| _fatal "failed mass_storage configfs I/O"

	rmdir ceph/configs/c.1 \
		|| _fatal "failed mass_storage configfs I/O"

	rmdir ceph/functions/mass_storage.usb0 \
		|| _fatal "failed mass_storage configfs I/O"

	rmdir ceph/strings/0x409 \
		|| _fatal "failed mass_storage configfs I/O"
}

function _luks_open() {
	local luks_key_file=$1
	local blk_dev=$2
	local crypto_name=$3

	[ -b "$blk_dev" ] || _fatal "block device at $blk_dev not found"
	[ -f "$luks_key_file" ] || _fatal "luks key at $luks_key_file not found"
	[ -n "$crypto_name" ] || _fatal "crypto name not provided"

	/sbin/cryptsetup --key-file "$luks_key_file" \
			 open --type luks "$blk_dev" "$crypto_name" \
		|| _failed "unable to open luks device at $blk_dev"
}
